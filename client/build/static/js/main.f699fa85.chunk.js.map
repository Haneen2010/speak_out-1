{"version":3,"sources":["components/navbar.js","components/doctors.js","components/articles.js","components/questions.js","components/login.js","components/home.js","components/askQuestions.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","style","fontFamily","id","Doctors","Articles","Questions","Login","Home","AddQuestion","prpos","type","value","inputValue","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPA0EeA,MAvEf,WAEI,OACI,sBAAKC,UAAU,gDAAf,UACY,eAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,WAAWE,MAAO,CAACC,WAAW,WAArD,mBAAuE,sBAAMH,UAAU,eAE/F,qBAAKA,UAAU,kBAAf,SACI,qBAAKA,UAAU,2BAA2BI,GAAG,oBAA7C,SACI,qBAAIJ,UAAU,aAAd,UACI,cAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,WAAWE,MAAO,CAACC,WAAW,WAA5D,SACA,oBAAIH,UAAU,WAAd,uBAIA,cAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,WAAWE,MAAO,CAACC,WAAW,WAA9D,SACA,oBAAIH,UAAU,WAAd,yBAIA,cAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,WAAWE,MAAO,CAACC,WAAW,WAA7D,SACA,oBAAIH,UAAU,WAAd,wBAIA,cAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,WAAWE,MAAO,CAACC,WAAW,WAA1D,SACA,oBAAIH,UAAU,WAAd,gC,OCjBTK,MATf,WAEI,OACI,8BACI,4CCKGC,MATf,WAEI,OACI,8BACI,6CCKGC,MATf,WAEI,OACI,8BACI,8CCKGC,MATf,WAEI,OACI,8BACI,0CCKGC,MATf,WAEI,OACI,8BACI,yCCQGC,MAXf,SAAqBC,GAEjB,OACI,gCACQ,uBAAOC,KAAK,OAAOC,MAAOF,EAAMG,aAChC,wBAAQF,KAAK,SAAb,mBACA,8BAAID,EAAMG,WAAV,W,MCyBDC,MAlBf,WACE,OACE,cAAC,IAAD,UACA,sBAAKf,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACA,cAAC,IAAD,CAAOgB,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,cAAC,IAAD,CAAOO,KAAK,WAAWE,UAAWb,IAClC,cAAC,IAAD,CAAOW,KAAK,YAAYE,UAAWZ,IACnC,cAAC,IAAD,CAAOU,KAAK,aAAaE,UAAWX,IACpC,cAAC,IAAD,CAAOS,KAAK,SAASE,UAAWV,IAChC,cAAC,IAAD,CAAOQ,KAAK,gBAAgBE,UAAaR,a,yBCf3BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,IAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f699fa85.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar (){\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <Link to=\"/\" className=\"nav-link\" style={{fontFamily:\"Cursive\"}}> Home <span className=\"sr-only\"/></Link>\n\n            <div className=\"container-fluid\">\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n                    <ul className=\"navbar-nav\">\n                        <Link to=\"/doctors\" className=\"nav-link\" style={{fontFamily:\"Cursive\"}}>\n                        <li className=\"nav-item\">\n                            Doctors\n                        </li>\n                        </Link>\n                        <Link to=\"/questions\" className=\"nav-link\" style={{fontFamily:\"Cursive\"}}>\n                        <li className=\"nav-item\">\n                            Questions\n                        </li>\n                        </Link>\n                        <Link to=\"/articles\" className=\"nav-link\" style={{fontFamily:\"Cursive\"}}>\n                        <li className=\"nav-item\">\n                            Articles\n                        </li>\n                        </Link>\n                        <Link to=\"/login\" className=\"nav-link\" style={{fontFamily:\"Cursive\"}}>\n                        <li className=\"nav-item\"> \n                            Login\n                        </li>\n                        </Link>\n                    </ul>\n                </div>\n                </div>\n        </nav>\n    )\n}\n\n/*\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n      <ul class=\"navbar-nav\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">Features</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">Pricing</a>\n        </li>\n        <li class=\"nav-item dropdown\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            Dropdown link\n          </a>\n          <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n            <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\n            <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\n            <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n*/ \n\nexport default Navbar;","import React from 'react';\n\nfunction Doctors (){\n\n    return (\n        <div>\n            <h2>Doctors</h2>\n        </div>\n    )\n}\n\nexport default Doctors;","import React from 'react';\n\nfunction Articles (){\n\n    return (\n        <div>\n            <h2>Articles</h2>\n        </div>\n    )\n}\n\nexport default Articles;","import React from 'react';\n\nfunction Questions (){\n\n    return (\n        <div>\n            <h2>Questions</h2>\n        </div>\n    )\n}\n\nexport default Questions;","import React from 'react';\n\nfunction Login (){\n\n    return (\n        <div>\n            <h2>Login</h2>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\n\nfunction Home (){\n\n    return (\n        <div>\n            <h2>Home</h2>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n// import { connect } from 'react-redux';\n\nfunction AddQuestion(prpos) {\n\n    return (\n        <div>\n                <input type=\"text\" value={prpos.inputValue} />\n                <button type='submit'> ASK </button>\n                <p>{prpos.inputValue} </p>\n        </div>\n    );\n}\n\nexport default AddQuestion;","import React from 'react';\r\n// import router from '../../server/app/routes/user';\r\n// import logo from './logo.svg';\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport Navbar from './components/navbar';\r\nimport { BrowserRouter as Router , Switch, Route } from  \"react-router-dom\";\r\nimport Doctors from \"./components/doctors\";\r\nimport Articles from \"./components/articles\";\r\nimport Questions from \"./components/questions\";\r\nimport Login from \"./components/login\";\r\nimport Home from \"./components/home\";\r\nimport AddQuestion from \"./components/askQuestions\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Switch>\r\n      <Route path=\"/\" exact component={Home}/>\r\n      <Route path=\"/doctors\" component={Doctors}/>\r\n      <Route path=\"/articles\" component={Articles}/>\r\n      <Route path=\"/questions\" component={Questions}/>\r\n      <Route path=\"/login\" component={Login}/>\r\n      <Route path=\"/askQuestions\" component = {AddQuestion}/>\r\n      </Switch>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}